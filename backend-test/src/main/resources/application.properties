#spring.security.oauth2.client.client-id=542896356243-h0fk1gpgm312rq94vl2hid8nj8ledog7.apps.googleusercontent.com
#spring.security.oauth2.client.client-secret=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
#spring.security.oauth2.client.access-token-uri=https://www.googleapis.com/oauth2/v4/token
#spring.security.oauth2.client.user-authorization-uri=https://accounts.google.com/o/oauth2/auth

#--------------------------- Database Configuration --------------------------
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#jdbc:postgresql://localhost:5432/test_2
#postgres